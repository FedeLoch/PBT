Class {
	#name : 'PBTCaseGenerator',
	#superclass : 'Object',
	#instVars : [
		'lastFeedback',
		'lastReceiver',
		'lastArguments'
	],
	#category : 'PBT-Generators',
	#package : 'PBT',
	#tag : 'Generators'
}

{ #category : 'as yet unclassified' }
PBTCaseGenerator >> feed: feedback [
	
	lastFeedback := feedback
]

{ #category : 'as yet unclassified' }
PBTCaseGenerator >> genArgumentsFor: target from: schema [
	
	
	lastArguments := schema argumentConstraints collectWithIndex: [ :inputConstraint :index |
		self genInstanceFor: target from: inputConstraint previous: (self lastArgument: index)
	].

	^ lastArguments

]

{ #category : 'as yet unclassified' }
PBTCaseGenerator >> genInstanceFor: target from: aConstraint previous: prevCase [
	
	^ aConstraint genBy: (PBTFeedback from: prevCase value: lastFeedback)
]

{ #category : 'as yet unclassified' }
PBTCaseGenerator >> genReceiverFor: target from: schema [
	
	"Consider random seeds and other strategies, not only delegate to the autogenerated generator"
	lastReceiver := self genInstanceFor: target from: schema receiverConstraint previous: lastReceiver.
	
	^ lastReceiver
]

{ #category : 'as yet unclassified' }
PBTCaseGenerator >> lastArgument: index [

	^ lastArguments ifNil: [ nil ] ifNotNil: [ lastArguments at: index ] 
]
